table_name AS alias_name;



In this syntax, the table_name is assigned an alias as alias_name. Similar to column aliases, the AS keyword is optional. It means that you omit the AS keyword



a_very_long_table_name.column_name
Code language: CSS (css)

you can assign the table a_very_long_table_name an alias like this:

a_very_long_table_name AS alias


And reference the column_name in the table a_very_long_table_name using the table alias:

alias.column_name

Typically, you often use a join clause to query data from multiple tables that have the same column name.

If you use the same column name that comes from multiple tables without fully qualifying them, you will get an error.

To avoid this error, you need to qualify these columns using the following syntax:

table_name.column_name


To make the query shorter, you can use the table aliases for the table names listed on FROM and INNER JOIN clauses. For example:

SELECT
	c.customer_id,  //customer_id from customer 
	first_name,
	amount,
	payment_date
FROM
	customer c               //Using aliases in table and using an alias c
INNER JOIN payment p   //using the table payment and aliases as p
    ON p.customer_id = c.customer_id   //showing the customer_id from both tables
ORDER BY 
   payment_date DESC;  //ordering by payement date DESC
   
  
 When you join a table to itself (a.k.a self-join), you need to use table aliases. This is because referencing the same table multiple times within a query results in an error.
 
 
SELECT
    e.first_name employee,
    m .first_name manager
FROM
    employee e
INNER JOIN employee m 
    ON m.employee_id = e.manager_id
ORDER BY manager;
