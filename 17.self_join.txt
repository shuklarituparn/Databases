CREATE TABLE employee (
	employee_id INT PRIMARY KEY,
	first_name VARCHAR (255) NOT NULL,
	last_name VARCHAR (255) NOT NULL,
	manager_id INT,
	FOREIGN KEY (manager_id) 
	REFERENCES employee (employee_id) 
	ON DELETE CASCADE
);
INSERT INTO employee (
	employee_id,
	first_name,
	last_name,
	manager_id
)
VALUES
	(1, 'Windy', 'Hays', NULL),
	(2, 'Ava', 'Christensen', 1),
	(3, 'Hassan', 'Conner', 1),
	(4, 'Anna', 'Reeves', 2),
	(5, 'Sau', 'Norman', 2),
	(6, 'Kelsie', 'Hays', 3),
	(7, 'Tory', 'Goff', 3),
	(8, 'Salley', 'Lester', 3);

In this employee table, the manager_id column references the employee_id column. The value in the manager_id column shows the manager to whom the employee directly reports. When the value in the manager_id column is null, that employee does not report to anyone. In other words, he or she is the top manager.

	

The self-join clause is used to join  a table to itself or compare two things in the same table


SELECT
    e.first_name || ' ' || e.last_name employee,
    m .first_name || ' ' || m .last_name manager
FROM
    employee e
INNER JOIN employee m ON m .employee_id = e.manager_id
ORDER BY manager;


SELECT
    e.first_name || ' ' || e.last_name employee,
    m .first_name || ' ' || m .last_name manager
FROM
    employee e
LEFT JOIN employee m ON m .employee_id = e.manager_id
ORDER BY manager;                                       //To include everyone even top manager use the left join


SELECT
    e.first_name || ' ' || e.last_name as employee,
    m .first_name || ' ' || m .last_name as manager
FROM
    employee e
INNER JOIN employee m ON m .employee_id = e.manager_id
ORDER BY manager;
 
 
// now makes more sense



//To return the different films that are having the same show length


SELECT
	f1.title,
	f2.title,
	f1.length

FROM 
	film f1
	
INNER JOIN film f2 on f1.title<>f2.title and f1.length=f2.length;
	
